map = {8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*0)+0)+2, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*0)+0)+2, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*0)+0)+2, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+5, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+5, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+0, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*3)+0)+2, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*0)+0)+2, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*0)+0)+2, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*1)+0)+7, 8*((8*1)+0)+6, 8*((8*1)+0)+6, 8*((8*1)+0)+6, 8*((8*0)+0)+7, 8*((8*0)+0)+0, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+6, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+6, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*2)+0)+6, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+6, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+0, 8*((8*1)+1)+1, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+6, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+0, 8*((8*1)+1)+1, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+6, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*2)+0)+6, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+6, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+6, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+6, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+7, 8*((8*3)+0)+6, 8*((8*3)+0)+6, 8*((8*3)+0)+6, 8*((8*3)+0)+7, 8*((8*0)+0)+0, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*3)+0)+2, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+0, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*3)+0)+2, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+0, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*0)+0)+2, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+0, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*1)+0)+2, 8*((8*3)+0)+3, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+3, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*1)+0)+1, 8*((8*0)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+1, 8*((8*3)+0)+1, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+5, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+5, 8*((8*2)+0)+3, 8*((8*0)+0)+3, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*0)+0)+4, 8*((8*2)+0)+3, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*3)+0)+2, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+3, 8*((8*0)+0)+0, 8*((8*2)+0)+3, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*0)+0)+0, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*3)+0)+2, 8*((8*2)+0)+2, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*1)+0)+3, 8*((8*3)+0)+2}

x_gap = 5
y_gap = 1

for y = 0, 27 do
    for x = 0, 30 do
        ex3.draw_static_sprite(map[x+y*31], 0, x+x_gap, y+y_gap)
    end
end

pacman_x = 16 * (x_gap + 23) - 8
pacman_y = 16 * (y_gap + 13)
pacman_rot = 1
pacman_anim = 0
pacman_spd = 2

function walkable(x, y)
    x = ((x + 8) >> 4) - x_gap
    y = ((y + 8) >> 4) - y_gap
    m = map[x+y*31] & 7
    return m == 0 or m == 4 or m == 5
end

function turnable(x, y)
    x = x - (x >> 4) * 16
    y = y - (y >> 4) * 16
    return x == 8 and y == 8
end

while 1 do
    -- アニメーション
    pacman_anim = pacman_anim + 1
    if pacman_anim > 2 then
        pacman_anim = 0
    end
    
    if turnable(pacman_x, pacman_y) then
        key_r, key_u, key_d, key_l = ex3.get_key_state()
        if key_r or key_u or key_d or key_l then
            if key_r and walkable(pacman_x+16+1, pacman_y) then
                pacman_rot = 2
            elseif key_u and walkable(pacman_x, pacman_y-1) then
                pacman_rot = 3
            elseif key_d and walkable(pacman_x, pacman_y+16+1) then
                pacman_rot = 1
            elseif key_l and walkable(pacman_x-1, pacman_y) then
                pacman_rot = 0
            end
        end
    end
    
    if pacman_rot == 2 then
        if walkable(pacman_x+16+1, pacman_y) then
           pacman_x = pacman_x + 2
        end
    elseif pacman_rot == 3 then
        if walkable(pacman_x, pacman_y-1) then
            pacman_y = pacman_y - 2
        end
    elseif pacman_rot == 1 then
        if walkable(pacman_x, pacman_y+16+1) then
            pacman_y = pacman_y + 2
        end
    elseif pacman_rot == 0 then
        if walkable(pacman_x-1, pacman_y) then
           pacman_x = pacman_x - 2
        end
    end
    
    ex3.draw_dynamic_sprite(8*2+pacman_anim, pacman_rot, pacman_x, pacman_y, 0)
    
    ex3.sleep()
end
